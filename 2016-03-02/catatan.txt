f :: Int -> Bool
g :: Double -> Int

a :: Double -> Bool
a = f . g


-- POLYMORPHISM

polymorphic function = "has many types"

length :: [a]->Int
NOTE: a DISEBUT type variable

eg: identity :: a -> a
	identity 4 = 4
	identity [[3]] = [[3]]

    fst :: (a,b) -> a
	fst (4,True) = 4
	fst ("ab", [1,2]) = "ab"

-- POLYMORPHISM vs OVERLOADING
polymorphic func: nama sama, beda tipe -> definisi yang dipakai sama
overloaded func : untuk setiap tipe berbeda, definisinya juga beda


-- POLYMORPHIC LIST FUNCTION from Prelude.hs
(:) :: a -> [a] -> [a]
	CONS | concat 1 elemen ke dalam list, di index pertama

(++) :: [a] -> [a] -> [a]
	APPEND | menggabungkan 2 buah list yang tipenya sama


(!!) :: [a] -> Int -> a
	INDEX | mengambil item di index ke-i di list

concat :: [[a]] -> [a]
	CONCAT | menggabungkan setiap elemen dalam list of list

length :: [a] -> Int

head :: [a] -> a	last :: [a] -> a
tail :: [a] -> [a]	init :: [a] -> [a]
misal: l=[1,2,3], maka head l = 1, tail l = [2,3]

replicate :: Int -> a -> [a]
	replicate 3 'c' = 'ccc'

take :: Int -> [a] -> [a]
	take 3 "Peccary" = "Pec"

drop :: Int -> [a] -> [a]
	drop 3 "Peccary" = "cary"

splitAt :: Int -> [a] -> ([a], [a])
	splitAt 3 "Peccary" = ("Pec", "cary")

zip :: [a], [b] -> [(a,b)]
	zip [1,2] [3,4,5] = [(1,3) , (2,4)]

unzip :: [(a,b)] -> ([a],[b])
	unzip [(1,3),(2,4)] = ([1,2], [3,4])

